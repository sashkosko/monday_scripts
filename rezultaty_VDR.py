import pandas as pd
from datetime import datetime
from datetime import timedelta
import re
import urllib.request
import xlrd

# Список з щогодинними прайскепами для зони ОЕС України. При появі нових прайскепів, достатньо додати їх в цей список (дата: [прайскепи]).
# В вовнику окремо додано дату переходу на  літній час (26.03.2023). Там ранкові піков години змішено на годину вперед. Додано також наступну дату (27.03.2023), щоб знову перейти до нормального режиму.
# Зауважте, що тут 25 годин (таке буває в тей день коли  змінюються зимовий час на літній)
price_cap = {
    datetime(2019, 7, 1).date(): [959.12, 959.12, 959.12, 959.12, 959.12, 959.12, 959.12, 2048.23, 2048.23, 2048.23,
                                  2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23,
                                  2048.23, 2048.23, 2048.23, 2048.23, 959.12, 959.12],
    datetime(2020, 7, 31).date(): [1228.94, 1228.94, 1228.94, 1228.94, 1228.94, 1228.94, 1228.94, 2048.23, 2048.23,
                                   2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 2048.23,
                                   2048.23, 2048.23, 2048.23, 2048.23, 2048.23, 1228.94, 1228.94],
    datetime(2021, 6, 18).date(): [1243.71, 1243.71, 1243.71, 1243.71, 1243.71, 1243.71, 1243.71, 4000, 4000, 4000,
                                   4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,
                                   1243.71, 1243.71],
    datetime(2021, 8, 1).date(): [2000, 2000, 2000, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000, 4000, 4000,
                                  4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 2000, 2000],
    datetime(2023, 3, 26).date(): [2000, 2000, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,
                                   4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 2000, 2000, 2000],
    datetime(2023, 3, 27).date(): [2000, 2000, 2000, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000, 4000, 4000,
                                   4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 2000, 2000],
    datetime(2023, 6, 30).date(): [3000, 3000, 3000, 3000, 3000, 3000, 3000, 5600, 5600, 5600, 5600, 5600, 5600,
                                   5600, 5600, 5600, 5600, 5600, 5600, 7200, 7200, 7200, 7200, 3000, 3000]}

# Створимо порожній DataFrame
df_res = pd.DataFrame()
date_end = datetime.today() - timedelta(days=1)  # Вчорашня дата
n = input("Вкажіть, за скільки місяців треба отримати дані: ")
# Знаючи за скільки місяців потрібні дані, можемо знайти початкову дату (date_start)
date_start = date_end - timedelta(days=30 * int(n))
# Дізнаємось які були прайскепи на початкову дату
# Для цього пройдемося по датах від 01.07.2019 до date_start і знайдемо останні зміни прайскепів в цьому діапазоні дат
date_range = pd.date_range(start=datetime(2019, 7, 1), end=date_start)
for cur_date in date_range:
    cur_date = cur_date.date()
    if cur_date in price_cap:
        cur_price_cap = price_cap[cur_date]
j = 0
# ПОчинаємо збирати дані.
date_range = pd.date_range(start=date_start, end=date_end)  # Діапазон дат
for cur_date in date_range:  # Проходимо по всіх датах в заданому діапазоні (від date_start до date_end)
    cur_date = cur_date.date()
    # Якщо cur_date є в словнику price_cap, то змниться cur_price_cap (список верхніх цін на кожну годину)
    if cur_date in price_cap:
        cur_price_cap = price_cap[cur_date]
    try:
        # Завантажуємо дані за поточну дату
        f = urllib.request.urlopen(
            f'https://www.oree.com.ua/index.php/PXS/downloadxlsx/{cur_date.strftime("%d.%m.%Y")}/IDM/2').read()
    except:
        time.sleep(4)
        f = urllib.request.urlopen(
            f'https://www.oree.com.ua/index.php/PXS/downloadxlsx/{cur_date.strftime("%d.%m.%Y")}/IDM/2').read()
    workbook = xlrd.open_workbook_xls(file_contents=f, ignore_workbook_corruption=True)
    df = pd.read_excel(workbook)
    # В колонках замінимо кому на крапку, вилалимо ' ' і переконвертуємо значення в float
    df['Ціна, грн/МВт.год'] = df['Ціна, грн/МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    df['Мінімальна ціна, грн/МВт.год'] = df['Мінімальна ціна, грн/МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    df['Максимальна ціна, грн/МВт.год'] = df['Максимальна ціна, грн/МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    df['Остання ціна, грн/МВт.год'] = df['Остання ціна, грн/МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    df['Обсяг продажу, МВт.год'] = df['Обсяг продажу, МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    df['Обсяг купівлі, МВт.год'] = df['Обсяг купівлі, МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    df['Заявлений обсяг продажу, МВт.год'] = df['Заявлений обсяг продажу, МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    df['Заявлений обсяг купівлі, МВт.год'] = df['Заявлений обсяг купівлі, МВт.год'].apply(
        lambda x: float(re.sub(' ', '', str(x).replace(',', '.'))))
    # Додаємо колонку з датою (в форматі datetime без часу)
    df['Дата'] = cur_date
    # В колонці "Година" видалимо символи ":00" і перетворимо в int
    df['Година'] = df['Година'].apply(lambda x: int(re.sub(':00', '', x)))
    # Додамо колонку 'Гранична ціна, грн/МВт*год', де значення береться з cur_price_cap за індексом [значення колонки "Година" - 1]
    df['Гранична ціна, грн/МВт*год'] = df['Година'].apply(lambda x: cur_price_cap[x - 1])

    # Додамо колонку "Попит, МВт*год" (вона дорівнює "Заявлений обсяг продажу, МВт*год" - "Заявлений обсяг купівлі, МВт*год")
    df['Попит, МВт*год'] = df['Заявлений обсяг продажу, МВт.год'] - df['Заявлений обсяг купівлі, МВт.год']
    # Додамо колонку "Торгова зона" вона має значення "ОЕС України (синхронізована з ENTSO-E)"
    df['Торгова зона'] = 'ОЕС України (синхронізована з ENTSO-E)'
    # Додамо df до df_res (методом concat)
    df_res = pd.concat([df_res, df])

    if j == 20:
        print(f'https://www.oree.com.ua/index.php/PXS/downloadxlsx/{cur_date.strftime("%d.%m.%Y")}/IDM/2')
        j = 0
    j = j + 1
# розмістимо колонки в потрібному порядку
df_res = df_res[['Дата', 'Година', 'Торгова зона', 'Ціна, грн/МВт.год', 'Мінімальна ціна, грн/МВт.год',
                 'Максимальна ціна, грн/МВт.год', 'Остання ціна, грн/МВт.год', 'Обсяг продажу, МВт.год',
                 'Обсяг купівлі, МВт.год', 'Заявлений обсяг продажу, МВт.год', 'Заявлений обсяг купівлі, МВт.год',
                 'Попит, МВт*год', 'Гранична ціна, грн/МВт*год']]
# Перейменуємо колонки
df_res.columns = ['Доба постачання', 'Година', 'Торгова зона', 'Ціна, грн/МВт*год', 'Мінімальна ціна, грн/МВт*год',
                  'Максимальна ціна, грн/МВт*год', 'Остання ціна, грн/МВт*год', 'Обсяг продажу, МВт*год',
                  'Обсяг купівлі, МВт*год', 'Заявлений обсяг продажу, МВт*год', 'Заявлений обсяг купівлі, МВт*год',
                  'Попит, МВт*год', 'Гранична ціна, грн/МВт*год']

# Збережемо результати в файл
df_res.to_excel(f'{date_end.strftime("%Y_%m_%d")}_rezultaty_torhiv_VDR.xlsx', index=False)
